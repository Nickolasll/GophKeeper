@startuml
!theme vibrant
title: 8.2 Диаграмма классов клиента

namespace client {
    namespace domain {
        namespace entities {}
        namespace repositories {}
        namespace client {}
        namespace services {}
    }
}

class client.domain.entities.Session {
    + UserID: String,
    + Token: String,
}

class client.domain.entities.Credentials {
    + ID : String
    + Name : String
    + Login : String
    + Password : String
}

class client.domain.entities.Text {
    + ID : String
    + Content : String
}

class client.domain.entities.Binary {
    + ID : String
    + Name : String
    + Data : String
}

class client.domain.entities.BankCard {
    + ID : String
    + Name : String
    + Number : String
    + ExpirationDate: DateTime
    + CardHolder: String
    + CVV: String
}

class client.domain.repositories.SessionRepositoryInterface {
    + crypto : CryptoServiceInterface
    + void Save(object : Session) : null
    + void Get() : Session | null
}

class client.domain.repositories.JWKRepositoryInterface {
    + crypto : CryptoServiceInterface
    + void Save(key : jwk.Key) : null
    + void Get() : jwk.Key | null
}

class client.domain.repositories.CredentialsRepositoryInterface {
    + crypto : CryptoServiceInterface
    + void Create(userID String, object : Credentials) : Null
    + void Update(userID String, object : Credentials) : null
    + void Get(userID String, credentialsID: UUID) : Credentials | null
    + void FindByUserID(userID: UUID) : List[Credentials]
}

class client.domain.repositories.TextRepositoryInterface {
    + crypto : CryptoServiceInterface
    + void Create(userID String, object : Text) : Null
    + void Update(userID String, object : Text) : null
    + void Get(userID String, textID: UUID) : Text | null
    + void FindByUserID(UserID: UUID) : List[Text]
}

class client.domain.repositories.BinaryRepositoryInterface {
    + crypto : CryptoServiceInterface
    + void Create(userID String, object : Binary) : Null
    + void Update(userID String, object : Binary) : null
    + void Get(userID String binaryID: UUID) : Binary | null
    + void FindByUserID(UserID: UUID) : List[Binary]
}

class client.domain.repositories.BankCardRepositoryInterface {
    + crypto : CryptoServiceInterface
    + void Create(userID String, object : BankCard) : Null
    + void Update(userID String, object : BankCard) : null
    + void Get(userID String, bankCardID: UUID) : BankCard | null
    + void FindByUserID(userID: UUID) : List[BankCard]
}

class client.domain.client.GophKeeperInterface {
    + X509Cert : []byte
    + Timeout : time.Duration
    + BaseURL : String
    + void Login(Login : String, Password : String) : String, error
    + void Register(Login : String, Password : String) : String, error
    + void Certs() : []byte, error
    + void Sync(UserID : String) : object
    + void CreateText(session: Session, content: String) : String, error
    + void UpdateText(session: Session, object: Text) : error
    + void CreateCredentials(session: Session, object: Credentials) : String, error
    + void UpdateCredentials(session: Session, object: Credentials) : error
    + void CreateBinary(session: Session, object: Binary) : String, error
    + void UpdateBinary(session: Session, object: Binary) : error
    + void CreateBankCard(session: Session, object: BankCard) : String, error
    + void UpdateBankCard(session: Session, object: BankCard) : error
}


class client.domain.services.CryptoServiceInterface {
    + PrivateKey : []byte
    + void Encode(data : []byte) : []byte
    + void Dencode(data : []byte) : []byte
}


@enduml